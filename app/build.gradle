/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
     maven {
        url 'https://repo.maven.apache.org/maven2'
    }
}

dependencies {
	// adding custom dependencies 
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.8'
	
    
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)  
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}


//Other way of naming tasks
tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}



/**
* Different types of tasks
**/

// Define a custom task for printing "Hello World"
task getVersion {
    doLast {
    	println "============================ TASKS ============================"
        println "Hello,\n Project Version = "+version+"\n Java version: "+ System.getProperty('java.version')+"\n Groovy version: " + GroovySystem.version
    }
}

// Define the task to compile Java source code and create a JAR
// Define the task to compile Java source code and create a JAR
task buildJar(type: Jar) {
    dependsOn 'getVersion' // Dependency on getVersion
    from sourceSets.main.output
    archiveFileName = 'my-app.jar'
    destinationDir = file('build/libs')
    
    // Specify the main class in the JAR's manifest
    manifest {
        attributes 'Main-Class': 'org.example.App'
    }
}

// Define the task to copy resource files to build directory
task copyResources {
    dependsOn buildJar // Dependency on building JAR
    doLast {
        copy {
            from 'src/main/resources'
            into 'build/resources/main'
        }
    }
}

// By default we have customazise the builds 
// Define the task to clean build folder
task cleanBuild(type: Delete) {
    doLast {
        delete 'build'
    }
}

// Make the "getVersion" task execute before the "test" task
test.dependsOn getVersion
